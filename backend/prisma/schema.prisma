generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(auto()) @map("_id") @db.ObjectId
  email        String          @unique
  name         String
  tasks        Task[]
  projects     Project[]
  notifications Notification[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  @@map("users")
}

model Project {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  ownerId     String  @db.ObjectId
  owner       User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  tasks       Task[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("projects")
}

model Task {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  priority    Int
  status      TaskStatus @default(TO_DO)
  dueDate     DateTime?
  tags        String[]
  projectId   String?    @db.ObjectId
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignedToId String?    @db.ObjectId
  assignedTo User?       @relation(fields: [assignedToId], references: [id], onDelete: SetNull)
  parentId    String?    @db.ObjectId
  parentTask  Task?      @relation("SubTasks", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subTasks    Task[]     @relation("SubTasks")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("tasks")
}

model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  recipientId String           @db.ObjectId
  recipient   User             @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  type        NotificationType
  message     String
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())

  @@map("notifications")
}

enum TaskStatus {
  TO_DO
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum NotificationType {
  ASSIGNMENT
  DUE_DATE_REMINDER
  STATUS_UPDATE
}
